apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
  // the name of the generated asset file containing your JS bundle
  bundleAssetName: "main.jsbundle",
  // don't know how to exclude from apk
  // extraPackagerArgs: ["--sourcemap-output", "$buildDir/intermediates/assets/release/main.jsbundle.map"],
  // bundleInDebug: false,
  nodeExecutableAndArgs: ["/usr/local/bin/node"],
  // bundleCommand: "ram-bundle",
  // extraPackagerArgs: ["--indexed-ram-bundle"]
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

def getPassword(String currentUser, String keyChain) {
   def stdout = new ByteArrayOutputStream()
   def stderr = new ByteArrayOutputStream()
   exec {
       commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
       standardOutput = stdout
       errorOutput = stderr
       ignoreExitValue true
   }
   //noinspection GroovyAssignabilityCheck
   stdout.toString().trim()
}

def getCodePushKey(String deployment) {
   def stdout = new ByteArrayOutputStream()
   def stderr = new ByteArrayOutputStream()
   try {
     exec {
         commandLine "../../scripts/get-code-push-key.sh", "android", deployment
         standardOutput = stdout
         errorOutput = stdout
         ignoreExitValue false
     }
   } catch (err) {
      logger.error("failed to fetch CodePush key for deployment $deployment: $stdout $stderr")
      throw err
   }

   //noinspection GroovyAssignabilityCheck
   return stdout.toString().trim()
}

def pass = getPassword("tradle", "android_keystore")

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    // compileOptions {
    //     sourceCompatibility JavaVersion.VERSION_1_7
    //     targetCompatibility JavaVersion.VERSION_1_7
    // }

    compileSdkVersion project.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion project.buildToolsVersion

    def vmajor = project.property('VERSION_MAJOR').toInteger()
    def vminor = project.property('VERSION_MINOR').toInteger()
    def vpatch = project.property('VERSION_PATCH').toInteger()
    def vbuild = project.property('VERSION_BUILD').toInteger()

    defaultConfig {
        applicationId "io.tradle.dev"
        // https://developer.android.com/training/articles/keystore.html
        // KeyPairGenerator for EC is supported on APIs 23+
        // minSdkVersion 23
        // elliptic curve keys support
        // minSdkVersion project.minSdkVersion
        // targetSdkVersion project.targetSdkVersion
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative59"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode vbuild
        versionName vmajor + "." + vminor + "." + vpatch
        // versionCode 1
        // versionName "1.0"
        // // ndk {
        // //     abiFilters "armeabi-v7a", "x86"
        // // }

        multiDexEnabled true
    }
    // applicationVariants.all { variant ->
    //   if (variant.buildType.name == "release") {
    //     variant.outputs.each { output ->
    //       output.versionCodeOverride = vbuild;
    //       output.versionNameOverride = vmajor + "." + vminor + "." + vpatch;
    //     }
    //   }
    // }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    signingConfigs {
        debug {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword pass
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword pass
        }
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword pass
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword pass
        }
    }
    splits {
        abi {
            enable enableSeparateBuildPerCPUArchitecture
            reset()
            universalApk false  // If true, also generate a universal APK
            // https://android.stackexchange.com/questions/186334/what-percentage-of-android-devices-runs-on-x86-architecture
            // include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            //
            // Before allowing 64-bit apks, see that react native supports it
            // https://github.com/facebook/react-native/issues/2814
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            // include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            def codePushKey = getCodePushKey("Debug")
            buildConfigField "String", "CODEPUSH_KEY", "\"${codePushKey}\""
            // applicationIdSuffix ".debug"
            ext.alwaysUpdateBuildId = false
        }
        release {
            // setting to true breaks require()'d images in JS
            // can probably set to true after figuring this out: https://developer.android.com/studio/build/shrink-code
            shrinkResources false
            zipAlignEnabled enableProguardInReleaseBuilds
            minifyEnabled enableProguardInReleaseBuilds
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            setProguardFiles([getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'])

            signingConfig signingConfigs.release
            def codePushKey = getCodePushKey("Production")
            buildConfigField "String", "CODEPUSH_KEY", "\"${codePushKey}\""
        }
        releaseStaging {
            // setting to true breaks require()'d images in JS
            // can probably set to true after figuring this out: https://developer.android.com/studio/build/shrink-code
            shrinkResources false
            zipAlignEnabled enableProguardInReleaseBuilds
            minifyEnabled enableProguardInReleaseBuilds
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            setProguardFiles([getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'])

            signingConfig signingConfigs.release
            def codePushKey = getCodePushKey("Staging")
            buildConfigField "String", "CODEPUSH_KEY", "\"${codePushKey}\""
            matchingFallbacks = ['release']
        }
    }

    // http://stackoverflow.com/questions/34031395/errorexecution-failed-for-task-apptransformresourceswithmergejavaresfordebug
    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        // exclude '**/*.jsbundle.map'  // doesn't work
        exclude 'assets/Regula/*.dat'
        // added when working with anyline:
        // pickFirst 'lib/armeabi-v7a/libgnustl_shared.so'
        // pickFirst 'lib/x86/libgnustl_shared.so'
    }
}

configurations.all {
    resolutionStrategy {
        force 'org.webkit:android-jsc:r236355'
    }
}

dependencies {
    implementation project(':@tradle_react-native-webview')
    implementation project(':react-native-localize')
    implementation project(':react-native-branch')
    implementation project(':react-native-document-reader-core-fullrfid')
    implementation project(':react-native-document-reader-api')
    implementation project(':react-native-exit-app')
    implementation project(':jail-monkey')
    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"

    implementation project(':@react-native-community_viewpager')
    implementation project(':@react-native-community_netinfo')
    // implementation 'com.facetec:zoom-authentication-hybrid:7.0.11'
    implementation project(':react-native-image-store')
    implementation project(':react-native-tradle-keeper')
    implementation project(':rn-fetch-blob')
    // implementation project(':blinkid-react-native')
    implementation project(':react-native-awesome-card-io')
    implementation 'com.android.support:multidex:1.0.1'

    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation project(':react-native-tcp')
    implementation project(':react-native-os')
    implementation project(':react-native-exception-handler')
    implementation project(':react-native-splash-screen')

    implementation project(':react-native-async-storage-snappy')
    // implementation project(':anyline-ocr-react-native-module')
    implementation project(':react-native-local-auth')
    implementation project(':react-native-ecc')
    implementation project(':react-native-orientation')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-udp')
    implementation project(':react-native-randombytes')
    implementation(project(':react-native-push-notification'))
    {
        exclude group: 'com.google.android.gms'
    }
    implementation project(':react-native-localization')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-keychain')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-document-picker')
    implementation(project(':react-native-device-info')) {
        exclude group: 'com.google.android.gms'
    }

    implementation "com.google.android.gms:play-services-base:${googlePlayServicesVersion}"
    implementation ("com.google.android.gms:play-services-gcm:${googlePlayServicesVersion}") {
        force = true;
    }

    implementation project(':react-native-code-push')
    implementation (project(':react-native-camera')) {
      exclude group: "com.google.android.gms"
      implementation "com.android.support:exifinterface:${supportLibVersion}"
      implementation ("com.google.android.gms:play-services-vision:${googlePlayServicesVersion}") {
        force = true
      }
    }
    // implementation ("com.google.android.gms:play-services-vision:${googlePlayServicesVersion}") {
    //   force = true;
    // }

    // implementation project(':react-native-regula-document-reader')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation ("com.android.support:appcompat-v7:${supportLibVersion}") {
      force = true
    }

    implementation "com.facebook.react:react-native:+"  // From node_modules
}

task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// START(APK per arch)
//
// source: https://developer.android.com/studio/build/configure-apk-splits
//
// Map for the version code that gives each ABI a value.
// must match android.splits.abi above
ext.abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, 'x86':3, 'x86_64':4]

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->
  // Assigns a different version code for each output APK
  // other than the universal APK.
  variant.outputs.each { output ->
    // def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_pac64": 4]

    // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
    def baseAbiVersionCode =
            // Determines the ABI for this variant and returns the mapped value.
            project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

    // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
    // the following code does not override the version code for universal APKs.
    // However, because we want universal APKs to have the lowest version code,
    // this outcome is desirable.
    if (baseAbiVersionCode != null) {

      // Assigns the new version code to versionCodeOverride, which changes the version code
      // for only the output APK, not for the variant itself. Skipping this step simply
      // causes Gradle to use the value of variant.versionCode for the APK.
      output.versionCodeOverride =
              baseAbiVersionCode * 1000 + variant.versionCode
    }
  }
}

// END(APK per arch)

apply plugin: 'com.google.gms.google-services'
