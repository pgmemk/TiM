apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
  // the name of the generated asset file containing your JS bundle
  bundleAssetName: "main.jsbundle",
  nodeExecutableAndArgs: ["/usr/local/bin/node"]
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

def getPassword(String currentUser, String keyChain) {
   def stdout = new ByteArrayOutputStream()
   def stderr = new ByteArrayOutputStream()
   exec {
       commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
       standardOutput = stdout
       errorOutput = stderr
       ignoreExitValue true
   }
   //noinspection GroovyAssignabilityCheck
   stdout.toString().trim()
}

def getCodePushKey(String deployment) {
   def stdout = new ByteArrayOutputStream()
   def stderr = new ByteArrayOutputStream()
   exec {
       commandLine "../../scripts/get-code-push-key.sh", "android", deployment
       standardOutput = stdout
       errorOutput = stderr
       ignoreExitValue false
   }
   //noinspection GroovyAssignabilityCheck
   def key = stdout.toString().trim()
   def err = stderr.toString().trim()
   if (key.isEmpty() || !err.isEmpty()) {
       throw new GradleException('error occurred fetching CodePush key: ' + err.toString())
   }

   return key
}

def pass = getPassword("tradle", "android_keystore")

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    // compileOptions {
    //     sourceCompatibility JavaVersion.VERSION_1_7
    //     targetCompatibility JavaVersion.VERSION_1_7
    // }

    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    def vmajor = project.property('VERSION_MAJOR').toInteger()
    def vminor = project.property('VERSION_MINOR').toInteger()
    def vpatch = project.property('VERSION_PATCH').toInteger()
    def vbuild = project.property('VERSION_BUILD').toInteger()

    defaultConfig {
        applicationId "io.tradle.dev"
        // https://developer.android.com/training/articles/keystore.html
        // KeyPairGenerator for EC is supported on APIs 23+
        // minSdkVersion 23
        // elliptic curve keys support
        minSdkVersion 19
        targetSdkVersion 23
        versionCode vbuild
        versionName vmajor + "." + vminor + "." + vpatch
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        multiDexEnabled true
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    signingConfigs {
        debug {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword pass
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword pass
        }
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword pass
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword pass
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            buildConfigField "String", "CODEPUSH_KEY", '""'
            // applicationIdSuffix ".debug"
        }
        release {
            // minifyEnabled enableProguardInReleaseBuilds
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            def codePushKey = getCodePushKey("Production")
            buildConfigField "String", "CODEPUSH_KEY", "\"${codePushKey}\""
        }
        releaseStaging {
            signingConfig signingConfigs.release
            def codePushKey = getCodePushKey("Staging")
            buildConfigField "String", "CODEPUSH_KEY", "\"${codePushKey}\""
            matchingFallbacks = ['release']
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    // http://stackoverflow.com/questions/34031395/errorexecution-failed-for-task-apptransformresourceswithmergejavaresfordebug
    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        pickFirst 'lib/armeabi-v7a/libgnustl_shared.so'
        pickFirst 'lib/x86/libgnustl_shared.so'
    }
}

buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }
  dependencies {
    // The Fabric Gradle plugin uses an open ended version to react
    // quickly to Android tooling updates
    classpath 'io.fabric.tools:gradle:1.+'
  }
}

apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile project(':blinkid-react-native')
    compile project(':react-native-awesome-card-io')
    compile 'com.android.support:multidex:1.0.1'
    compile project(':react-native-branch')
    compile project(':react-native-tcp')
    compile project(':react-native-os')
    compile project(':react-native-exception-handler')
    compile project(':react-native-splash-screen')
    compile project(':react-native-fabric')
    compile('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
        transitive = true
    }
    compile project(':react-native-async-storage-snappy')
    // compile project(':anyline-ocr-react-native-module')
    compile project(':react-native-local-auth')
    compile project(':react-native-ecc')
    compile project(':react-native-orientation')
    compile project(':react-native-vector-icons')
    compile project(':react-native-udp')
    compile project(':react-native-randombytes')
    compile(project(':react-native-push-notification'))
    {
        exclude group: 'com.google.android.gms'
    }
    compile project(':react-native-localization')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-keychain')
    compile project(':react-native-image-picker')
    compile(project(':react-native-device-info')) {
        exclude group: 'com.google.android.gms'
    }
    compile "com.google.android.gms:play-services-base:11.8.0"
    compile ('com.google.android.gms:play-services-gcm:11.8.0') {
        force = true;
    }

    compile project(':react-native-code-push')
    compile (project(':react-native-camera')) {
      exclude group: "com.google.android.gms"
      compile "com.android.support:exifinterface:${supportLibVersion}"
      compile ('com.google.android.gms:play-services-vision:11.8.0') {
        force = true
      }
    }
    // compile ("com.google.android.gms:play-services-vision:11.8.0") {
    //   force = true;
    // }
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
