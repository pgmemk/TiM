# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.2"

default_platform :android

platform :android do
  before_all do
    ENV['CODE_PUSH_APP_NAME_ANDROID'] = 'tim-android'
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # ensure_git_status_clean
  end

  lane :inc_build do
    gradle(task: 'versionBuild')
    #increment_android_version_code(path: "gradle.properties")

    git_commit(
      path: '../android/gradle.properties',
      message: "Android release version bump"
    )

    #push_to_git_remote
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :alpha do
    gradle(task: "assembleRelease")
    supply(track: "alpha")
  end

  desc "Deploy a new version to the Google Play"
  lane :release do
    gradle(task: "assembleRelease")
    supply
  end

  desc "Deploy a new version to the Google Play (dry run)"
  lane :release_dryrun do
    gradle(task: "assembleRelease")
    supply(validate_only: true)
  end

  desc "Assemble a Staging Release"
  lane :release_staging do
    gradle(task: "assembleReleaseStaging")
  end

  desc "build & codepush android bundle (defaults to Staging)"
  desc "test on Staging, then run: fastlane codepush_android_promote"
  lane :codepush_android do |options|
    # ensure_git_status_clean
    current_version = sh "../../scripts/get-android-version.sh"
    # current_version = sh("env $(grep -v '^#' \"../gradle.properties\" | xargs) echo \"$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH\"")
    # current_major = [current_version.split('.').first, 'x', 'x'].join('.')
    # current_minor = current_version.split('.').slice(0, 2).push('x').join('.')
    dry_run = options[:dry_run] == false ? false : true
    # see config opts for code_push plugin here
    # https://github.com/manuelkch/fastlane-plugin-code_push
    code_push_release_react(
      app_name: ENV['CODE_PUSH_APP_NAME_ANDROID'],
      platform: 'android',
      deployment: options[:deployment] || 'Staging',
      target_binary_version: options[:target_binary_version] || current_version,
      dry_run: dry_run,
      execution_dir_path: '../'
    )
  end

  lane :codepush_android_promote do
    code_push_promote(app_name: ENV['CODE_PUSH_APP_NAME_ANDROID'])
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
