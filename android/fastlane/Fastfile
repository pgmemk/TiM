# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.2"

default_platform :android

platform :android do
  before_all do
    # weird to have them declared here, but .env is loaded from s3
    ENV['CODE_PUSH_APP_NAME_ANDROID'] = 'tim-android'
    ENV['DEFAULT_TESTER_EMAIL'] = 'mark@tradle.io'
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    sh "../../hooks/update_version.sh"
  end

  private_lane :inc_version do |options|
    ensure_git_status_clean
    part = options[:part]
    sh "../../scripts/inc-android-version.js #{part}"
    Dotenv.load('../gradle.properties')
    version = "#{ENV['VERSION_MAJOR']}.#{ENV['VERSION_MINOR']}.#{ENV['VERSION_PATCH']}.#{ENV['VERSION_BUILD']}"
    message = "Android release (#{part})"
    git_commit(
      path: './gradle.properties',
      message: message
    )

    add_git_tag(
      tag: "v#{version}-android",
      message: message
    )
  end

  lane :inc_major do
    inc_version(part: "major")
  end

  lane :inc_minor do
    inc_version(part: "minor")
  end

  lane :inc_patch do
    inc_version(part: "patch")
  end

  lane :inc_build do
    inc_version(part: "build")
  end

  desc "Assemble a Staging Release"
  lane :build_staging do
    ensure_git_status_clean
    gradle(task: "assembleReleaseStaging")
    notification(
      title: "Staging Release Built!",
      message: "Try it out on your device with: fastlane install_staging_apk"
    )
  end

  desc "Submit a new Staging release to Crashlytics (Fabric)"
  lane :beta do |options|
    ensure_git_status_clean
    Dotenv.load('../app/fabric.properties')
    api_token = ENV['apiKey']
    build_secret = ENV['apiSecret']
    build_staging
    emails = options[:test_email] ? options[:test_email] : [ENV['DEFAULT_TESTER_EMAIL']] # You can list more emails here
    groups = options[:test_email] ? nil : nil # You can define groups on the web and reference them here

    crashlytics(
      emails: emails,
      groups: groups,
      # Check out the changelog_from_git_commits action
      notes: 'Distributed with fastlane',
      # Should this distribution notify your testers via email?
      notifications: true,
      api_token: api_token,
      build_secret: build_secret
    )

    notification(
      title: "Pushed Staging Release to Crashlytics!",
      message: "you should get an email with further instructions"
    )

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Ensure build number available"
  lane :ensure_build_not_in_store do |options|
    track = options[:track]
    local = sh "../../scripts/get-android-version.sh build"
    remote = google_play_track_version_codes(track: track)[0]
    if !remote.nil?
      UI.message("Current Build: #{local}".green)
      UI.message("Current Build in Play Store \"#{track}\" track: #{remote}".green)
      unless local.to_i > remote.to_i
        UI.user_error!("this build already exists in the Play Store \"#{track}\" track!")
      end
    end
  end

  lane :backup_release do |options|
    usage = "e.g. backup_release stage:release apk_path:/path/to/app-release.apk"
    stage = options[:stage]
    if stage.nil?
      UI.user_error!("expected 'stage', #{usage}")
    end

    apk_path = options[:apk_path]
    if apk_path.nil?
      UI.user_error!("expected 'apk_path', #{usage}")
    end

    version = (sh "../../scripts/get-android-version.sh full").strip
    sh "../../scripts/backup-release.sh android #{stage} #{version} #{apk_path}"
  end

  private_lane :releaseit do |options|
    ensure_git_status_clean
    track = options[:track]
    if track.nil?
      UI.user_error!("expected 'track' option, e.g. track:internal or track:production")
    end

    task = options[:task]
    if task.nil?
      if track == "internal"
        UI.message("building staging release".green)
        task = "assembleReleaseStaging"
      else
        task = "assembleRelease"
      end
    end

    unless options[:dry_run]
      ensure_build_not_in_store(track: track)
    end

    gradle(task: task)

    stage = "release"
    if track == "internal"
      stage = "releaseStaging"
    end

    apk = "android/app/build/outputs/apk/#{stage}/app-#{stage}.apk"
    backup_release(
      apk_path: apk,
      stage: stage
    )

    unless options[:dry_run]
      UI.message("uploading apk #{apk}".green)
      upload_to_play_store(
        track: track,
        skip_upload_screenshots: options[:skip_upload_screenshots] != false,
        skip_upload_images: options[:skip_upload_images] != false,
        apk: apk
      )
    end
  end

  desc "Deploy a new version to the Google Play internal track"
  lane :release_staging do |options|
    options[:track] = "internal"
    releaseit(options)
  end

  desc "Deploy a new version to the Google Play alpha track"
  lane :release_alpha do |options|
    options[:track] = "alpha"
    releaseit(options)
  end

  desc "Deploy a new version to the Google Play beta track"
  lane :release_beta do |options|
    options[:track] = "beta"
    releaseit(options)
  end

  desc "Deploy a new version to the Google Play"
  lane :release_prod do |options|
    options[:track] = "production"
    releaseit(options)
  end

  desc "Remove Tradle APK from attached device or emulator"
  lane :uninstall_apk do
    sh "adb uninstall io.tradle.dev"
  end

  private_lane :install_apk do |options|
    stage = options[:stage]
    sh "adb install ../app/build/outputs/apk/#{stage}/app-#{stage}.apk"
  end

  desc "Install the Staging APK to the attached device or emulator"
  lane :install_staging_apk do |options|
    install_apk(stage: "releaseStaging")
  end

  desc "Install the Release APK to the attached device or emulator"
  lane :install_release_apk do |options|
    install_apk(stage: "release")
  end

  desc "build & codepush android bundle (defaults to Staging)"
  desc "test on Staging, then run: fastlane codepush_android_promote"
  lane :codepush do |options|
    ensure_git_status_clean
    current_version = sh "../../scripts/get-android-version.sh semver"
    # current_version = sh("env $(grep -v '^#' \"../gradle.properties\" | xargs) echo \"$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH\"")
    # current_major = [current_version.split('.').first, 'x', 'x'].join('.')
    # current_minor = current_version.split('.').slice(0, 2).push('x').join('.')

    # see config opts for code_push plugin here
    # https://github.com/manuelkch/fastlane-plugin-code_push
    target_binary_version = (options[:target_binary_version] || current_version).strip
    mandatory = options[:mandatory] || false
    deployment = options[:deployment] || 'Staging'

    # offset from project root
    commit = (sh "../../scripts/get-short-commit-hash.sh").strip
    bundle_name = 'main.jsbundle'
    output_dir = "release/android/#{target_binary_version}/#{commit}"
    sh "mkdir -p #{output_dir}"

    code_push_release_react(
      app_name: ENV['CODE_PUSH_APP_NAME_ANDROID'],
      platform: 'android',
      deployment: deployment,
      target_binary_version: target_binary_version,
      description: options[:description] || 'no description for release',
      dry_run: options[:dry_run],
      execution_dir_path: '../',
      bundle_name: bundle_name,
      mandatory: mandatory,
      output_dir: output_dir,
      sourcemap_output: "#{output_dir}/#{bundle_name}.map"
    )

    unless options[:dry_run]
      sh "../../scripts/backup-bundle.sh android #{output_dir}"
      notification(
        title: "Android Code Pushed!",
        message: "deployment: #{deployment}, version: #{target_binary_version}, mandatory: #{mandatory}"
      )
    end
  end

  lane :codepush_promote_to_release do
    code_push_promote(app_name: ENV['CODE_PUSH_APP_NAME_ANDROID'])
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
