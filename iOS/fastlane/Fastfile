# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.27.0"

# This value helps us track success metrics for Fastfiles
# we automatically generate. Feel free to remove this line
# once you get things running smoothly!
generated_fastfile_id "056cccb7-a2ca-4533-a405-1e643adc7c31"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # weird to have them declared here, but .env is loaded from s3
    ENV['PROFILE_PROD'] = "match AppStore io.tradle.dev.tim"
    ENV['PROFILE_DEV'] = "match Development io.tradle.dev.tim"
    ENV['GYM_XCCONFIG'] = "./release.xcconfig"
    ENV['PROJECT'] = "./Tradle.xcodeproj"
    ENV['WORKSPACE'] = "./Tradle.xcworkspace"
    ENV['CODE_PUSH_APP_NAME_IOS'] = 'tim-ios'
    ENV['DEFAULT_TESTER_EMAIL'] = 'mark@tradle.io'
    ENV['APP_NAME'] = 'Tradle'
  end

  private_lane :update_version_file do
    sh "../../hooks/update_version.sh"
  end

  private_lane :build_prereq do
    clean_build_artifacts
    cocoapods
    sh "../../scripts/fix-staging.js"
    update_version_file
    ensure_git_status_clean
  end

  private_lane :inc_version do |options|
    build_prereq
    part = options[:part]
    sh "../../scripts/version_ios.sh #{options[:part]}"
    message = "iOS release (#{options[:part]})"
    git_commit(
      path: './Tradle/Info.plist',
      message: message
    )

    version = get_info_plist_value(path: "./Tradle/Info.plist", key: "CFBundleVersion")
    add_git_tag(
      tag: "v#{version}-ios",
      message: message
    )
  end

  lane :backup_release do |options|
    scheme = options[:scheme]
    if scheme.nil?
      UI.user_error!("expected 'scheme', e.g. backup_release scheme:Staging")
    end

    version = get_info_plist_value(path: "./Tradle/Info.plist", key: "CFBundleVersion")
    sh "../../scripts/backup-release.sh ios #{scheme} #{version}"
  end

  lane :inc_major do
    inc_version(part: "major")
  end

  lane :inc_minor do
    inc_version(part: "minor")
  end

  lane :inc_patch do
    inc_version(part: "patch")
  end

  lane :inc_build do
    inc_version(part: "build")
  end

  lane :sign_dev do
    automatic_code_signing(
      path: ENV['PROJECT'],
      use_automatic_signing: false,
      profile_name: ENV['PROFILE_DEV']
    )

    # get_certificates(
    #   development: true,
    # )
  end

  lane :sign_prod do
    automatic_code_signing(
      path: ENV['PROJECT'],
      use_automatic_signing: false,
      profile_name: ENV['PROFILE_PROD']
    )

    # get_certificates(
    #   development: false,
    # )
  end

  lane :sign_auto do
    automatic_code_signing(
      path: ENV['PROJECT'],
      use_automatic_signing: true
    )
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do |options|
    build_prereq
    options[:prebuilt] = true
    beta_testflight(options)
    unless options[:dry_run]
      upload_to_fabric(options)
      if options[:codepush]
        codepush_prebuilt
      end
    end
  end

  lane :codepush_prebuilt do |options|
    target_binary_version = get_info_plist_value(path: "./Tradle/Info.plist", key: "CFBundleShortVersionString")
    full_version = get_info_plist_value(path: "./Tradle/Info.plist", key: "CFBundleVersion")
    commit = (sh "../../scripts/get-short-commit-hash.sh").strip
    bundle_name = 'main.jsbundle'
    release_dir = "../../release/ios/#{full_version}/#{commit}"
    sh "code-push release #{ENV['CODE_PUSH_APP_NAME_IOS']} #{release_dir} #{target_binary_version} -d Staging"
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta_testflight do |options|
    unless options[:prebuilt]
      build_prereq
    end

    unless options[:dry_run]
      ensure_build_not_in_testflight
    end

    sign_dev
    sync_code_signing(type: 'development')
    gym_staging
    unless options[:dry_run]
      upload_to_testflight
      notification(
        title: "Beta Released!",
        message: "see it in TestFlight!"
      )
    end
  end

  lane :gym_staging do
    gym(
      workspace: ENV['WORKSPACE'],
      # FIXME: change to 'Staging' and fix the error: "ld: library not found for -lPods-Tradle"
      # see log in iOS/fastlane/staging-broken.log
      scheme: 'Staging',
      configuration: 'Staging',
      export_method: 'development',
      xcconfig: 'staging.xcconfig',
      clean: true
    )

    backup_release(scheme: "Staging")
  end

  lane :gym_release do
    gym(
      workspace: ENV['WORKSPACE'],
      codesigning_identity: 'iPhone Distribution: Tradle Inc (94V7783F74)',
      # FIXME: change to 'Staging' and fix the error: "ld: library not found for -lPods-Tradle"
      # see log in iOS/fastlane/staging-broken.log
      scheme: 'Release',
      configuration: 'Release',
      export_method: 'app-store',
      xcconfig: 'release.xcconfig',
      clean: true
    )

    backup_release(scheme: "Release")
  end

  lane :ensure_build_not_in_testflight do
    local = get_info_plist_value(path: "./Tradle/Info.plist", key: "CFBundleVersion")
    remote = latest_testflight_build_number
    UI.message("Current Build: #{local}".green)
    UI.message("Current Build in TestFlight: #{remote}".green)
    unless Gem::Version.new(local) > Gem::Version.new(remote)
      UI.user_error!("this build already exists in TestFlight!")
    end
  end

  # private_lane :gymit do |options|
  #   scheme = options[:scheme] || 'Release'
  #   lScheme = scheme.downcase
  #   export_method = scheme == 'Release' ? 'app-store' : 'development'
  #   # codesigning_identity = nil
  #   # if scheme == 'Release'
  #   #   codesigning_identity = 'iPhone Distribution: Tradle Inc (94V7783F74)'
  #   # else
  #   #   codesigning_identity = 'iPhone Development: Tradle Inc (94V7783F74)'
  #   # end

  #   gym(
  #     workspace: ENV['WORKSPACE'],
  #     # codesigning_identity: codesigning_identity,
  #     # FIXME: change to 'Staging' and fix the error: "ld: library not found for -lPods-Tradle"
  #     # see log in iOS/fastlane/staging-broken.log
  #     scheme: scheme,
  #     configuration: scheme,
  #     export_method: export_method,
  #     xcconfig: "#{lScheme}.xcconfig",
  #     clean: true
  #   )
  # end

  lane :prepare_release do
    sign_prod
    sync_code_signing(type: 'appstore')
    gym_release
  end

  desc "Deploy a new version to the App Store"
  lane :release do |options|
    #snapshot
    unless options[:dry_run]
      ensure_build_not_in_testflight
    end

    prepare_release
    unless options[:dry_run]
      deliverit(options)
    end
    # frameit
  end

  lane :deliverit do |options|
    changelog = options[:changelog]
    if changelog.nil?
      changelog = prompt(
        text: "What's new in this version? ",
        multi_line_end_keyword: 'END'
      )
    end

    deliver(
      force: true,
      release_notes: ({
        'default' => changelog,
        'en-US' => changelog,
        'en-UK' => changelog
      }),
      skip_metadata: true,
      skip_screenshots: true,
      # skip_binary_upload: false
    )
  end

  desc "Submit a new release to Crashlytics (Fabric)"
  lane :beta_fabric do |options|
    unless options[:prebuilt]
      build_prereq
    end

    # build your iOS app
    # sync_code_signing(
    #   force_for_new_devices: true
    # )

    sign_dev
    gym(
      export_method: 'development'
    )

    upload_to_fabric(options)
    sign_auto
  end

  lane :upload_to_fabric do |options|
    emails = options[:test_email] ? options[:test_email] : [ENV['DEFAULT_TESTER_EMAIL']] # You can list more emails here
    groups = options[:test_email] ? nil : nil # You can define groups on the web and reference them here

    crashlytics(api_token: ENV['CRASHLYTICS_API_TOKEN'],
             build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
         # crashlytics_path: './Pods/Crashlytics/submit',
                   emails: emails,
                   groups: groups,
                    notes: 'Distributed with fastlane', # Check out the changelog_from_git_commits action
            notifications: true) # Should this distribution notify your testers via email?
  end

  lane :travis do
    cocoapods
    sign_prod
    create_keychain(
      name: "MATCH_KEYCHAIN_NAME",
      password: "MATCH_KEYCHAIN_PASSWORD",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )

    sync_code_signing(
      type: 'appstore',
      readonly: true,
      keychain_name: "MATCH_KEYCHAIN_NAME",
      keychain_password: "MATCH_KEYCHAIN_PASSWORD"
    )

    gym(
      export_method: 'app-store',
      include_bitcode: true
    )

    deliver(force:true)
  end

  desc "Upload to App Store and submit for review"
  lane :upload do
    deliver
  end

  desc "build & codepush an ios bundle (defaults to Staging)"
  desc "test on Staging, then run: fastlane codepush_ios_promote"
  lane :codepush do |options|
    ensure_git_status_clean
    update_version_file
    target_binary_version = options[:version]
    if target_binary_version.nil?
      target_binary_version = get_info_plist_value(path: "./Tradle/Info.plist", key: "CFBundleShortVersionString")
    end

    # see config opts for code_push plugin here
    # https://github.com/manuelkch/fastlane-plugin-code_push
    mandatory = options[:mandatory] || false
    deployment = options[:deployment] || 'Staging'

    # offset from project root
    commit = (sh "../../scripts/get-short-commit-hash.sh").strip
    bundle_name = 'main.jsbundle'
    output_dir = "release/ios/#{target_binary_version}/#{commit}"
    sh "mkdir -p #{output_dir}"

    code_push_release_react(
      app_name: ENV['CODE_PUSH_APP_NAME_IOS'],
      platform: 'ios',
      deployment: deployment,
      target_binary_version: target_binary_version,
      description: options[:description] || 'no description for release',
      dry_run: options[:dry_run],
      execution_dir_path: '../',
      bundle_name: bundle_name,
      mandatory: mandatory,
      output_dir: output_dir,
      sourcemap_output: "#{output_dir}/#{bundle_name}.map"
    )

    unless options[:dry_run]
      sh "../../scripts/backup-bundle.sh ios #{output_dir}"
      notification(
        title: "iOS Code Pushed!",
        message: "deployment: #{deployment}, version: #{target_binary_version}, mandatory: #{mandatory}"
      )
    end
  end

  lane :codepush_promote_to_release do
    code_push_promote(app_name: ENV['CODE_PUSH_APP_NAME_IOS'])
  end

  lane :install do |options|
    ipa = options[:ipa]
    if ipa.nil?
      version = options[:version]
      if version.nil?
        UI.user_error!("expected 'ipa' or 'version'")
      end
    else
      install_on_device(
        ipa: ipa,
      )
    end
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # don't delete untracked files
    reset_git_repo(
      skip_clean: true,
      files: [
        ENV['PROJECT']
      ]
    )
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
