#!/usr/bin/env node

const fs = require('pify')(require('fs'))
const path = require('path')

const replacements = [
  {
    file: '../node_modules/bluebird-q/index.js',
    from: 'require("bluebird/js/main/promise")()',
    to: 'require("bluebird")',
  },
  {
    file: '../node_modules/react-native-branch/src/index.js',
    from: `const packageFile = require('./../package.json')
export const VERSION = packageFile.version`,
    to: `export const VERSION = require('./../package.json').version`,
  },
  {
    file: '../node_modules/@tradle/iot-message/index.js',
    from: `const { version } = require('./package.json')`,
    to: `const version = require('./package.json').version`,
  },
  {
    file: '../node_modules/react-native-code-push/request-fetch-adapter.js',
    from: `const packageJson = require("./package.json");`,
    to: `const packageJson = {
  version: require('./package.json').version,
  name: require('./package.json').name,
  dependencies: require('./package.json').dependencies["code-push"],
}`,
  },
  {
    file: '../node_modules/rn-markdown/markdown.js',
    from: `import {
  name as packageName
} from './package.json'`,
    to: `const packageName = require('./package.json').name,
`
  },
  {
    file: '../node_modules/@tradle/aws-client/debug.js',
    from: `const { name, version } = require('./package.json')`,
    to: `const name = require('./package.json').name
const version = require('./package.json').version`,
  },
]

Promise.all(replacements.map(async ({ file, from, to }) => {
  file = path.resolve(__dirname, file)
  const current = fs.readFileSync(file, 'utf8')
  const idx = current.indexOf(from)
  if (idx !== -1) {
    console.log('fixing', file)
    fs.writeFileSync(file, current.replace(from, to))
  }
}))
